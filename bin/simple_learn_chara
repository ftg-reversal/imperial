#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Imperial
#  ======
#  Copyright (C) 2015 FTG-Reversal
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

import sys

sys.path.append('.')
train_basedir = sys.argv[1]

from imperial import CharaRecoginizer


def learnImageGroup(recoginizer, player, name="unknown", dir=None):
    if dir is None or recoginizer is None:
        return None

    train_dir = "%s/%s/%s" % (train_basedir, player, dir)
    print("%s => %s" % (name, train_dir))
    recoginizer.learn_image_group(name=name, dir=train_dir)


def loopbackTest(player, charas):
    results = {}
    misses = []
    total = 0
    correct = 0

    sort_zumi = {}

    for chara in charas.groups:
        for sample in chara['images']:
            answer, distance = charas.predict(sample['img'])

            total = total + 1
            if (chara['name'] == answer):
                correct = correct + 1
                msg = "正解"
            else:
                msg = "　 "
                misses.append(sample)

            if not answer in sort_zumi:
                sort_zumi[answer] = []
            sort_zumi[answer].append((distance, sample['src_path']))

            #print("%s: %s 結果: %s<br>" % (msg, chara['name'], r['name']))

    s = ("%d 問中 %d 問正解　　学習内容に対する正答率 %3.1f％" %
         (total, correct, correct / total * 100))

    # miss list 表示
    misses_hist = []
    for sample in []:  # misses:
        param, r = charas.analyze_image(sample, debug=True)
        misses_hist.append(r)
    charas.show_learned_icon_image(misses_hist, 'Misses', save='misses.png')

    # file にリスト書き出し
    f = open(player + '_charas.html', 'w')
    f.write('<p>%s</p>' % s)
    for chara in sorted(sort_zumi.keys()):
        f.write('<h3>%s</h3>' % chara)
        print('<h3>%s</h3>' % chara)
        for t in sorted(sort_zumi[chara]):
            f.write('<font size=-4>%s</font><img src=%s alt="%s">' %
                    (t[0], t[1], t[0]))
            print('<font size=-4>%s</font><img src=%s alt="%s">' %
                  (t[0], t[1], t[0]))

    f.close()
    return s

charas_1p = CharaRecoginizer()
learnImageGroup(charas_1p, '1p', "アクセル", dir="ax")
learnImageGroup(charas_1p, '1p', "ベッドマン", dir="be")
learnImageGroup(charas_1p, '1p', "チップ", dir="ch")
learnImageGroup(charas_1p, '1p', "エルフェルト", dir="el")
learnImageGroup(charas_1p, '1p', "ファウスト", dir="fa")
learnImageGroup(charas_1p, '1p', "イノ", dir="in")
learnImageGroup(charas_1p, '1p', "ジャム", dir="ja")
learnImageGroup(charas_1p, '1p', "ジャックオー", dir="jc")
learnImageGroup(charas_1p, '1p', "ジョニー", dir="jo")
learnImageGroup(charas_1p, '1p', "カイ", dir="ky")
learnImageGroup(charas_1p, '1p', "レオ", dir="le")
learnImageGroup(charas_1p, '1p', "メイ", dir="ma")
learnImageGroup(charas_1p, '1p', "ミリア", dir="mi")
learnImageGroup(charas_1p, '1p', "ポチョムキン", dir="po")
learnImageGroup(charas_1p, '1p', "ラムレザル", dir="ra")
learnImageGroup(charas_1p, '1p', "シン", dir="si")
learnImageGroup(charas_1p, '1p', "スレイヤー", dir="sl")
learnImageGroup(charas_1p, '1p', "ソル", dir="so")
learnImageGroup(charas_1p, '1p', "ヴェノム", dir="ve")
learnImageGroup(charas_1p, '1p', "ザトー", dir="za")
charas_1p.knn_train_from_group()
charas_1p.save_model_to_file('1p')
charas_1p.knn_reset()

charas_2p = CharaRecoginizer()
learnImageGroup(charas_2p, '2p', "アクセル", dir="ax")
learnImageGroup(charas_2p, '2p', "ベッドマン", dir="be")
learnImageGroup(charas_2p, '2p', "チップ", dir="ch")
learnImageGroup(charas_2p, '2p', "エルフェルト", dir="el")
learnImageGroup(charas_2p, '2p', "ファウスト", dir="fa")
learnImageGroup(charas_2p, '2p', "イノ", dir="in")
learnImageGroup(charas_2p, '2p', "ジャム", dir="ja")
learnImageGroup(charas_2p, '2p', "ジャックオー", dir="jc")
learnImageGroup(charas_2p, '2p', "ジョニー", dir="jo")
learnImageGroup(charas_2p, '2p', "カイ", dir="ky")
learnImageGroup(charas_2p, '2p', "レオ", dir="le")
learnImageGroup(charas_2p, '2p', "メイ", dir="ma")
learnImageGroup(charas_2p, '2p', "ミリア", dir="mi")
learnImageGroup(charas_2p, '2p', "ポチョムキン", dir="po")
learnImageGroup(charas_2p, '2p', "ラムレザル", dir="ra")
learnImageGroup(charas_2p, '2p', "シン", dir="si")
learnImageGroup(charas_2p, '2p', "スレイヤー", dir="sl")
learnImageGroup(charas_2p, '2p', "ソル", dir="so")
learnImageGroup(charas_2p, '2p', "ヴェノム", dir="ve")
learnImageGroup(charas_2p, '2p', "ザトー", dir="za")
charas_2p.knn_train_from_group()
charas_2p.save_model_to_file('2p')
charas_2p.knn_reset()

charas_1p.load_model_from_file('1p')
charas_1p.knn_train()
s = loopbackTest('1p', charas_1p)
print(s)

charas_2p.load_model_from_file('2p')
charas_2p.knn_train()
s = loopbackTest('2p', charas_2p)
print(s)
